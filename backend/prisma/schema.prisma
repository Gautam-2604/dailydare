generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  email       String      @unique
  password    String
  name        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  username    String      @unique

  challenges  Challenge[]
  profile     UserProfile?

  sentRequests     FriendRequest[] @relation("Sender")
  receivedRequests FriendRequest[] @relation("Receiver")

  // Friendships (self-relation)
  friends     User[]      @relation("UserFriends")
  friendOf    User[]      @relation("UserFriends")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FriendRequest {
  id          String    @id @default(uuid())
  status      RequestStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Sender relation
  senderId    String
  sender      User      @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)

  // Receiver relation
  receiverId  String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model UserProfile {
  id            String    @id @default(uuid())
  bio           String?
  streak        Int       @default(0)
  totalPoints   Int       @default(0)
  level         String    @default("Beginner")
  daresCompleted Int      @default(0)
  friendsConnected        Int      @default(0)
  
  notifications       Boolean   @default(true)
  soundEffects        Boolean   @default(true)
  darkMode           Boolean   @default(true)
  publicProfile      Boolean   @default(true)
  friendRequests     Boolean   @default(true)
  challengeReminders Boolean   @default(true)
  weeklyReport       Boolean   @default(false)
  dataSync          Boolean   @default(true)

  userId        String    @unique  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Challenge {
  id           String     @id @default(uuid())
  title        String
  description  String?
  startDate    DateTime   @default(now())
  completedAt  DateTime?
  isCompleted  Boolean    @default(false)
  Category     String
  difficulty   String

  userId       String
  user         User       @relation(fields: [userId], references: [id])

  createdAt    DateTime   @default(now())
  endsAt       DateTime
  updatedAt    DateTime   @updatedAt
}
